// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TimeIsMoney.DataAccess;

namespace TimeIsMoney.DataAccess.Migrations
{
    [DbContext(typeof(TimeInMoneyContext))]
    [Migration("20180830111412_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.ConfirmationCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ExpiresAt");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ConfirmationCodes");
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.TransactionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("Comment");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("OwnerId");

                    b.Property<DateTimeOffset>("Time");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.TransactionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.UserTransactionTypeRefEntity", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("TransactionTypeId");

                    b.HasKey("UserId", "TransactionTypeId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("UserTransactionTypes");
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.ConfirmationCodeEntity", b =>
                {
                    b.HasOne("TimeIsMoney.DataAccess.Entities.UserEntity", "User")
                        .WithOne("ConfirmationCode")
                        .HasForeignKey("TimeIsMoney.DataAccess.Entities.ConfirmationCodeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.TransactionEntity", b =>
                {
                    b.HasOne("TimeIsMoney.DataAccess.Entities.UserEntity", "Owner")
                        .WithMany("Transactions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TimeIsMoney.DataAccess.Entities.TransactionTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TimeIsMoney.DataAccess.Entities.UserTransactionTypeRefEntity", b =>
                {
                    b.HasOne("TimeIsMoney.DataAccess.Entities.TransactionTypeEntity", "TransactionType")
                        .WithMany("Users")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TimeIsMoney.DataAccess.Entities.UserEntity", "User")
                        .WithMany("TransactionTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
